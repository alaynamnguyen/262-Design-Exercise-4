syntax = "proto3";

package chat;

service ChatService {
    // Login flow
    rpc LoginUsername(LoginUsernameRequest) returns (LoginUsernameResponse);  // login-username -> login-username-reply
    rpc LoginPassword(LoginPasswordRequest) returns (LoginPasswordResponse); // login-password -> login-password-reply

    // Account flow
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);

    // Messaging flow
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    rpc GetSentMessages(GetMessagesRequest) returns (GetMessagesResponse);
    rpc GetReceivedMessages(GetMessagesRequest) returns (GetMessagesResponse);
    rpc GetMessageByMid(GetMessageRequest) returns (GetMessageResponse);
    rpc MarkMessageRead(MarkMessageReadRequest) returns (MarkMessageReadResponse);
    rpc DeleteMessages(DeleteMessagesRequest) returns (DeleteMessagesResponse);

    // Replicas
    rpc RegisterReplica(RegisterReplicaRequest) returns (RegisterReplicaResponse);
    // rpc SyncMessagesWithReplica(ReplicaSyncRequest) returns (ReplicaSyncResponse);  // TODO: leader push notification to replica or replica periodically pull for updates?
    rpc SyncMessagesFromLeader(MessageSyncRequest) returns (MessageSyncResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc ElectLeader(ElectLeaderRequest) returns (ElectLeaderResponse);
}

// Replica flow

message RegisterReplicaRequest {
    string ip_address = 1;
    int32 port = 2;
}

message RegisterReplicaResponse {
    bool success = 1;
    repeated string replica_list = 2;  // ["ip:port", ...]
}

// message ReplicaSyncRequest {
//     repeated MessageData messages = 1;
// }

// message ReplicaSyncResponse {
//     bool success = 1;
// }

message MessageSyncRequest {
    repeated MessageData messages = 1;
}

message MessageSyncResponse {
    bool success = 1;
}

message HeartbeatRequest {
    string server_id = 1;
}

message HeartbeatResponse {
    bool success = 1;
}

message ElectLeaderRequest {
    string server_id = 1;  // Server requesting election
    int64 term = 2;  // Logical term for election
}

message ElectLeaderResponse {
    bool success = 1;
    string new_leader_id = 2;
}

// Login flow
message LoginUsernameRequest {
    string username = 1;
}

message LoginUsernameResponse {
    bool user_exists = 1;
    string username = 2;
}

message LoginPasswordRequest {
    string username = 1;
    string password = 2;
}

message LoginPasswordResponse {
    bool success = 1;
    string uid = 2;
}

// Message storage for replication
message MessageData {
    string sender = 1;
    string receiver = 2;
    string sender_username = 3;
    string receiver_username = 4;
    string text = 5;
    string mid = 6;
    string timestamp = 7;
    bool receiver_read = 8;
}

// Account flow
message DeleteAccountRequest {
    string uid = 1;
}

message DeleteAccountResponse {
    bool success = 1;
}

message ListAccountsRequest {
    string wildcard = 1;
}

message ListAccountsResponse {
    repeated string accounts = 1;
}

// Messaging flow
message SendMessageRequest {
    string sender = 1;
    string receiver_username = 2;
    string text = 3;
    string timestamp = 4;
}

message SendMessageResponse {
    bool success = 1;
}

message GetMessagesRequest {
    string uid = 1;
}

message GetMessagesResponse {
    repeated string mids = 1;
}

message GetMessageRequest {
    string mid = 1;
}

message GetMessageResponse {
    string sender_uid = 1;
    string receiver_uid = 2;
    string sender_username = 3;
    string receiver_username = 4;
    string text = 5;
    string timestamp = 6;
    bool receiver_read = 7;
}

message MarkMessageReadRequest {
    string mid = 1;
}

message MarkMessageReadResponse {
    bool success = 1;
}

message DeleteMessagesRequest {
    string uid = 1;
    repeated string mids = 2;
}

message DeleteMessagesResponse {
    bool success = 1;
}